//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LightSwitchApplication
{
    #region Data Services
    
    /// <summary>
    /// Provides members to query and update data in the ApplicationData datasource.
    /// </summary>
    public sealed partial class ApplicationDataService
        : global::LightSwitchApplication.ApplicationData
    {
        #region Constructors
    
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ApplicationDataService() : base()
        {
        }
    
        #endregion
    
        #region Private Properties
        
        /// <summary>
        /// Gets the Application object for this application.  The Application object provides access to active screens, methods to open screens and access to the current user.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::LightSwitchApplication.Application Application
        {
            get
            {
                return global::LightSwitchApplication.Application.Current;
            }
        }
        
        /// <summary>
        /// Gets the containing data workspace.  The data workspace provides access to all data sources in the application.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::LightSwitchApplication.DataWorkspace DataWorkspace
        {
            get
            {
                return (global::LightSwitchApplication.DataWorkspace)this.Details.DataWorkspace;
            }
        }
        
        #endregion
    
        #region Server Interceptions Points
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Products_CanInsert(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Products_CanUpdate(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Products_CanDelete(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Products_CanRead(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Products_Inserting(global::LightSwitchApplication.Product entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Products_Inserted(global::LightSwitchApplication.Product entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Products_Updating(global::LightSwitchApplication.Product entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Products_Updated(global::LightSwitchApplication.Product entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Products_Deleting(global::LightSwitchApplication.Product entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Products_Deleted(global::LightSwitchApplication.Product entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Products_Validate(global::LightSwitchApplication.Product entity, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder results);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Products_Filter(ref global::System.Linq.Expressions.Expression<global::System.Func<global::LightSwitchApplication.Product, bool>> filter);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ProductFeatures_CanInsert(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ProductFeatures_CanUpdate(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ProductFeatures_CanDelete(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ProductFeatures_CanRead(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ProductFeatures_Inserting(global::LightSwitchApplication.ProductFeature entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ProductFeatures_Inserted(global::LightSwitchApplication.ProductFeature entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ProductFeatures_Updating(global::LightSwitchApplication.ProductFeature entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ProductFeatures_Updated(global::LightSwitchApplication.ProductFeature entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ProductFeatures_Deleting(global::LightSwitchApplication.ProductFeature entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ProductFeatures_Deleted(global::LightSwitchApplication.ProductFeature entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ProductFeatures_Validate(global::LightSwitchApplication.ProductFeature entity, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder results);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ProductFeatures_Filter(ref global::System.Linq.Expressions.Expression<global::System.Func<global::LightSwitchApplication.ProductFeature, bool>> filter);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Customers_CanInsert(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Customers_CanUpdate(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Customers_CanDelete(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Customers_CanRead(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Customers_Inserting(global::LightSwitchApplication.Customer entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Customers_Inserted(global::LightSwitchApplication.Customer entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Customers_Updating(global::LightSwitchApplication.Customer entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Customers_Updated(global::LightSwitchApplication.Customer entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Customers_Deleting(global::LightSwitchApplication.Customer entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Customers_Deleted(global::LightSwitchApplication.Customer entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Customers_Validate(global::LightSwitchApplication.Customer entity, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder results);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Customers_Filter(ref global::System.Linq.Expressions.Expression<global::System.Func<global::LightSwitchApplication.Customer, bool>> filter);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Licenses_CanInsert(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Licenses_CanUpdate(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Licenses_CanDelete(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Licenses_CanRead(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Licenses_Inserting(global::LightSwitchApplication.License entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Licenses_Inserted(global::LightSwitchApplication.License entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Licenses_Updating(global::LightSwitchApplication.License entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Licenses_Updated(global::LightSwitchApplication.License entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Licenses_Deleting(global::LightSwitchApplication.License entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Licenses_Deleted(global::LightSwitchApplication.License entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Licenses_Validate(global::LightSwitchApplication.License entity, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder results);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Licenses_Filter(ref global::System.Linq.Expressions.Expression<global::System.Func<global::LightSwitchApplication.License, bool>> filter);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void LicenseProductFeatures_CanInsert(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void LicenseProductFeatures_CanUpdate(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void LicenseProductFeatures_CanDelete(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void LicenseProductFeatures_CanRead(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void LicenseProductFeatures_Inserting(global::LightSwitchApplication.LicenseProductFeature entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void LicenseProductFeatures_Inserted(global::LightSwitchApplication.LicenseProductFeature entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void LicenseProductFeatures_Updating(global::LightSwitchApplication.LicenseProductFeature entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void LicenseProductFeatures_Updated(global::LightSwitchApplication.LicenseProductFeature entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void LicenseProductFeatures_Deleting(global::LightSwitchApplication.LicenseProductFeature entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void LicenseProductFeatures_Deleted(global::LightSwitchApplication.LicenseProductFeature entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void LicenseProductFeatures_Validate(global::LightSwitchApplication.LicenseProductFeature entity, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder results);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void LicenseProductFeatures_Filter(ref global::System.Linq.Expressions.Expression<global::System.Func<global::LightSwitchApplication.LicenseProductFeature, bool>> filter);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void LicenseAdditionalAttributes_CanInsert(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void LicenseAdditionalAttributes_CanUpdate(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void LicenseAdditionalAttributes_CanDelete(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void LicenseAdditionalAttributes_CanRead(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void LicenseAdditionalAttributes_Inserting(global::LightSwitchApplication.LicenseAdditionalAttribute entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void LicenseAdditionalAttributes_Inserted(global::LightSwitchApplication.LicenseAdditionalAttribute entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void LicenseAdditionalAttributes_Updating(global::LightSwitchApplication.LicenseAdditionalAttribute entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void LicenseAdditionalAttributes_Updated(global::LightSwitchApplication.LicenseAdditionalAttribute entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void LicenseAdditionalAttributes_Deleting(global::LightSwitchApplication.LicenseAdditionalAttribute entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void LicenseAdditionalAttributes_Deleted(global::LightSwitchApplication.LicenseAdditionalAttribute entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void LicenseAdditionalAttributes_Validate(global::LightSwitchApplication.LicenseAdditionalAttribute entity, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder results);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void LicenseAdditionalAttributes_Filter(ref global::System.Linq.Expressions.Expression<global::System.Func<global::LightSwitchApplication.LicenseAdditionalAttribute, bool>> filter);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void SaveChanges_CanExecute(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void SaveChanges_Executing();
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void SaveChanges_Executed();
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void SaveChanges_ExecuteFailed(global::System.Exception exception);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Query_Executing(global::Microsoft.LightSwitch.QueryExecutingDescriptor queryDescriptor);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Query_Executed(global::Microsoft.LightSwitch.QueryExecutedDescriptor queryDescriptor);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Query_ExecuteFailed(global::Microsoft.LightSwitch.QueryExecuteFailedDescriptor queryDescriptor);
    
        #endregion
    
        #region Details Class
    
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        public static new class DetailsClass
        {
    
            static DetailsClass()
            {
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.ApplicationDataService, global::LightSwitchApplication.Product>
                __ProductsEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.ApplicationDataService, global::LightSwitchApplication.Product>(
                    "Products",
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__Products_CanInsert,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__Products_CanUpdate,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__Products_CanDelete,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__Products_CanRead,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__Products_Inserting,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__Products_Inserted,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__Products_Updating,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__Products_Updated,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__Products_Deleting,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__Products_Deleted,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__Products_Validate,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__Products_Filter);
            private static bool __Products_CanInsert(global::LightSwitchApplication.ApplicationDataService d)
            {
                bool result = true;
                d.Products_CanInsert(ref result);
                return result;
            }
            private static bool __Products_CanUpdate(global::LightSwitchApplication.ApplicationDataService d)
            {
                bool result = true;
                d.Products_CanUpdate(ref result);
                return result;
            }
            private static bool __Products_CanDelete(global::LightSwitchApplication.ApplicationDataService d)
            {
                bool result = true;
                d.Products_CanDelete(ref result);
                return result;
            }
            private static bool __Products_CanRead(global::LightSwitchApplication.ApplicationDataService d)
            {
                bool result = true;
                d.Products_CanRead(ref result);
                return result;
            }
            private static void __Products_Inserting(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.Product e)
            {
                d.Products_Inserting(e);
            }
            private static void __Products_Inserted(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.Product e)
            {
                d.Products_Inserted(e);
            }
            private static void __Products_Updating(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.Product e)
            {
                d.Products_Updating(e);
            }
            private static void __Products_Updated(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.Product e)
            {
                d.Products_Updated(e);
            }
            private static void __Products_Deleting(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.Product e)
            {
                d.Products_Deleting(e);
            }
            private static void __Products_Deleted(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.Product e)
            {
                d.Products_Deleted(e);
            }
            private static void __Products_Validate(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.Product e, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder r)
            {
                d.Products_Validate(e, r);
            }
            private static global::System.Linq.Expressions.Expression<global::System.Func<global::LightSwitchApplication.Product, bool>> __Products_Filter(global::LightSwitchApplication.ApplicationDataService d)
            {
                global::System.Linq.Expressions.Expression<global::System.Func<global::LightSwitchApplication.Product, bool>> filter = null;
                d.Products_Filter(ref filter);
                return filter;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.ApplicationDataService, global::LightSwitchApplication.ProductFeature>
                __ProductFeaturesEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.ApplicationDataService, global::LightSwitchApplication.ProductFeature>(
                    "ProductFeatures",
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__ProductFeatures_CanInsert,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__ProductFeatures_CanUpdate,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__ProductFeatures_CanDelete,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__ProductFeatures_CanRead,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__ProductFeatures_Inserting,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__ProductFeatures_Inserted,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__ProductFeatures_Updating,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__ProductFeatures_Updated,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__ProductFeatures_Deleting,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__ProductFeatures_Deleted,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__ProductFeatures_Validate,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__ProductFeatures_Filter);
            private static bool __ProductFeatures_CanInsert(global::LightSwitchApplication.ApplicationDataService d)
            {
                bool result = true;
                d.ProductFeatures_CanInsert(ref result);
                return result;
            }
            private static bool __ProductFeatures_CanUpdate(global::LightSwitchApplication.ApplicationDataService d)
            {
                bool result = true;
                d.ProductFeatures_CanUpdate(ref result);
                return result;
            }
            private static bool __ProductFeatures_CanDelete(global::LightSwitchApplication.ApplicationDataService d)
            {
                bool result = true;
                d.ProductFeatures_CanDelete(ref result);
                return result;
            }
            private static bool __ProductFeatures_CanRead(global::LightSwitchApplication.ApplicationDataService d)
            {
                bool result = true;
                d.ProductFeatures_CanRead(ref result);
                return result;
            }
            private static void __ProductFeatures_Inserting(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.ProductFeature e)
            {
                d.ProductFeatures_Inserting(e);
            }
            private static void __ProductFeatures_Inserted(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.ProductFeature e)
            {
                d.ProductFeatures_Inserted(e);
            }
            private static void __ProductFeatures_Updating(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.ProductFeature e)
            {
                d.ProductFeatures_Updating(e);
            }
            private static void __ProductFeatures_Updated(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.ProductFeature e)
            {
                d.ProductFeatures_Updated(e);
            }
            private static void __ProductFeatures_Deleting(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.ProductFeature e)
            {
                d.ProductFeatures_Deleting(e);
            }
            private static void __ProductFeatures_Deleted(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.ProductFeature e)
            {
                d.ProductFeatures_Deleted(e);
            }
            private static void __ProductFeatures_Validate(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.ProductFeature e, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder r)
            {
                d.ProductFeatures_Validate(e, r);
            }
            private static global::System.Linq.Expressions.Expression<global::System.Func<global::LightSwitchApplication.ProductFeature, bool>> __ProductFeatures_Filter(global::LightSwitchApplication.ApplicationDataService d)
            {
                global::System.Linq.Expressions.Expression<global::System.Func<global::LightSwitchApplication.ProductFeature, bool>> filter = null;
                d.ProductFeatures_Filter(ref filter);
                return filter;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.ApplicationDataService, global::LightSwitchApplication.Customer>
                __CustomersEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.ApplicationDataService, global::LightSwitchApplication.Customer>(
                    "Customers",
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__Customers_CanInsert,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__Customers_CanUpdate,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__Customers_CanDelete,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__Customers_CanRead,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__Customers_Inserting,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__Customers_Inserted,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__Customers_Updating,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__Customers_Updated,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__Customers_Deleting,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__Customers_Deleted,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__Customers_Validate,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__Customers_Filter);
            private static bool __Customers_CanInsert(global::LightSwitchApplication.ApplicationDataService d)
            {
                bool result = true;
                d.Customers_CanInsert(ref result);
                return result;
            }
            private static bool __Customers_CanUpdate(global::LightSwitchApplication.ApplicationDataService d)
            {
                bool result = true;
                d.Customers_CanUpdate(ref result);
                return result;
            }
            private static bool __Customers_CanDelete(global::LightSwitchApplication.ApplicationDataService d)
            {
                bool result = true;
                d.Customers_CanDelete(ref result);
                return result;
            }
            private static bool __Customers_CanRead(global::LightSwitchApplication.ApplicationDataService d)
            {
                bool result = true;
                d.Customers_CanRead(ref result);
                return result;
            }
            private static void __Customers_Inserting(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.Customer e)
            {
                d.Customers_Inserting(e);
            }
            private static void __Customers_Inserted(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.Customer e)
            {
                d.Customers_Inserted(e);
            }
            private static void __Customers_Updating(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.Customer e)
            {
                d.Customers_Updating(e);
            }
            private static void __Customers_Updated(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.Customer e)
            {
                d.Customers_Updated(e);
            }
            private static void __Customers_Deleting(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.Customer e)
            {
                d.Customers_Deleting(e);
            }
            private static void __Customers_Deleted(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.Customer e)
            {
                d.Customers_Deleted(e);
            }
            private static void __Customers_Validate(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.Customer e, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder r)
            {
                d.Customers_Validate(e, r);
            }
            private static global::System.Linq.Expressions.Expression<global::System.Func<global::LightSwitchApplication.Customer, bool>> __Customers_Filter(global::LightSwitchApplication.ApplicationDataService d)
            {
                global::System.Linq.Expressions.Expression<global::System.Func<global::LightSwitchApplication.Customer, bool>> filter = null;
                d.Customers_Filter(ref filter);
                return filter;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.ApplicationDataService, global::LightSwitchApplication.License>
                __LicensesEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.ApplicationDataService, global::LightSwitchApplication.License>(
                    "Licenses",
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__Licenses_CanInsert,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__Licenses_CanUpdate,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__Licenses_CanDelete,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__Licenses_CanRead,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__Licenses_Inserting,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__Licenses_Inserted,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__Licenses_Updating,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__Licenses_Updated,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__Licenses_Deleting,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__Licenses_Deleted,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__Licenses_Validate,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__Licenses_Filter);
            private static bool __Licenses_CanInsert(global::LightSwitchApplication.ApplicationDataService d)
            {
                bool result = true;
                d.Licenses_CanInsert(ref result);
                return result;
            }
            private static bool __Licenses_CanUpdate(global::LightSwitchApplication.ApplicationDataService d)
            {
                bool result = true;
                d.Licenses_CanUpdate(ref result);
                return result;
            }
            private static bool __Licenses_CanDelete(global::LightSwitchApplication.ApplicationDataService d)
            {
                bool result = true;
                d.Licenses_CanDelete(ref result);
                return result;
            }
            private static bool __Licenses_CanRead(global::LightSwitchApplication.ApplicationDataService d)
            {
                bool result = true;
                d.Licenses_CanRead(ref result);
                return result;
            }
            private static void __Licenses_Inserting(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.License e)
            {
                d.Licenses_Inserting(e);
            }
            private static void __Licenses_Inserted(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.License e)
            {
                d.Licenses_Inserted(e);
            }
            private static void __Licenses_Updating(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.License e)
            {
                d.Licenses_Updating(e);
            }
            private static void __Licenses_Updated(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.License e)
            {
                d.Licenses_Updated(e);
            }
            private static void __Licenses_Deleting(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.License e)
            {
                d.Licenses_Deleting(e);
            }
            private static void __Licenses_Deleted(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.License e)
            {
                d.Licenses_Deleted(e);
            }
            private static void __Licenses_Validate(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.License e, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder r)
            {
                d.Licenses_Validate(e, r);
            }
            private static global::System.Linq.Expressions.Expression<global::System.Func<global::LightSwitchApplication.License, bool>> __Licenses_Filter(global::LightSwitchApplication.ApplicationDataService d)
            {
                global::System.Linq.Expressions.Expression<global::System.Func<global::LightSwitchApplication.License, bool>> filter = null;
                d.Licenses_Filter(ref filter);
                return filter;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.ApplicationDataService, global::LightSwitchApplication.LicenseProductFeature>
                __LicenseProductFeaturesEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.ApplicationDataService, global::LightSwitchApplication.LicenseProductFeature>(
                    "LicenseProductFeatures",
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__LicenseProductFeatures_CanInsert,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__LicenseProductFeatures_CanUpdate,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__LicenseProductFeatures_CanDelete,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__LicenseProductFeatures_CanRead,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__LicenseProductFeatures_Inserting,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__LicenseProductFeatures_Inserted,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__LicenseProductFeatures_Updating,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__LicenseProductFeatures_Updated,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__LicenseProductFeatures_Deleting,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__LicenseProductFeatures_Deleted,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__LicenseProductFeatures_Validate,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__LicenseProductFeatures_Filter);
            private static bool __LicenseProductFeatures_CanInsert(global::LightSwitchApplication.ApplicationDataService d)
            {
                bool result = true;
                d.LicenseProductFeatures_CanInsert(ref result);
                return result;
            }
            private static bool __LicenseProductFeatures_CanUpdate(global::LightSwitchApplication.ApplicationDataService d)
            {
                bool result = true;
                d.LicenseProductFeatures_CanUpdate(ref result);
                return result;
            }
            private static bool __LicenseProductFeatures_CanDelete(global::LightSwitchApplication.ApplicationDataService d)
            {
                bool result = true;
                d.LicenseProductFeatures_CanDelete(ref result);
                return result;
            }
            private static bool __LicenseProductFeatures_CanRead(global::LightSwitchApplication.ApplicationDataService d)
            {
                bool result = true;
                d.LicenseProductFeatures_CanRead(ref result);
                return result;
            }
            private static void __LicenseProductFeatures_Inserting(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.LicenseProductFeature e)
            {
                d.LicenseProductFeatures_Inserting(e);
            }
            private static void __LicenseProductFeatures_Inserted(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.LicenseProductFeature e)
            {
                d.LicenseProductFeatures_Inserted(e);
            }
            private static void __LicenseProductFeatures_Updating(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.LicenseProductFeature e)
            {
                d.LicenseProductFeatures_Updating(e);
            }
            private static void __LicenseProductFeatures_Updated(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.LicenseProductFeature e)
            {
                d.LicenseProductFeatures_Updated(e);
            }
            private static void __LicenseProductFeatures_Deleting(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.LicenseProductFeature e)
            {
                d.LicenseProductFeatures_Deleting(e);
            }
            private static void __LicenseProductFeatures_Deleted(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.LicenseProductFeature e)
            {
                d.LicenseProductFeatures_Deleted(e);
            }
            private static void __LicenseProductFeatures_Validate(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.LicenseProductFeature e, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder r)
            {
                d.LicenseProductFeatures_Validate(e, r);
            }
            private static global::System.Linq.Expressions.Expression<global::System.Func<global::LightSwitchApplication.LicenseProductFeature, bool>> __LicenseProductFeatures_Filter(global::LightSwitchApplication.ApplicationDataService d)
            {
                global::System.Linq.Expressions.Expression<global::System.Func<global::LightSwitchApplication.LicenseProductFeature, bool>> filter = null;
                d.LicenseProductFeatures_Filter(ref filter);
                return filter;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.ApplicationDataService, global::LightSwitchApplication.LicenseAdditionalAttribute>
                __LicenseAdditionalAttributesEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.ApplicationDataService, global::LightSwitchApplication.LicenseAdditionalAttribute>(
                    "LicenseAdditionalAttributes",
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__LicenseAdditionalAttributes_CanInsert,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__LicenseAdditionalAttributes_CanUpdate,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__LicenseAdditionalAttributes_CanDelete,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__LicenseAdditionalAttributes_CanRead,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__LicenseAdditionalAttributes_Inserting,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__LicenseAdditionalAttributes_Inserted,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__LicenseAdditionalAttributes_Updating,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__LicenseAdditionalAttributes_Updated,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__LicenseAdditionalAttributes_Deleting,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__LicenseAdditionalAttributes_Deleted,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__LicenseAdditionalAttributes_Validate,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__LicenseAdditionalAttributes_Filter);
            private static bool __LicenseAdditionalAttributes_CanInsert(global::LightSwitchApplication.ApplicationDataService d)
            {
                bool result = true;
                d.LicenseAdditionalAttributes_CanInsert(ref result);
                return result;
            }
            private static bool __LicenseAdditionalAttributes_CanUpdate(global::LightSwitchApplication.ApplicationDataService d)
            {
                bool result = true;
                d.LicenseAdditionalAttributes_CanUpdate(ref result);
                return result;
            }
            private static bool __LicenseAdditionalAttributes_CanDelete(global::LightSwitchApplication.ApplicationDataService d)
            {
                bool result = true;
                d.LicenseAdditionalAttributes_CanDelete(ref result);
                return result;
            }
            private static bool __LicenseAdditionalAttributes_CanRead(global::LightSwitchApplication.ApplicationDataService d)
            {
                bool result = true;
                d.LicenseAdditionalAttributes_CanRead(ref result);
                return result;
            }
            private static void __LicenseAdditionalAttributes_Inserting(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.LicenseAdditionalAttribute e)
            {
                d.LicenseAdditionalAttributes_Inserting(e);
            }
            private static void __LicenseAdditionalAttributes_Inserted(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.LicenseAdditionalAttribute e)
            {
                d.LicenseAdditionalAttributes_Inserted(e);
            }
            private static void __LicenseAdditionalAttributes_Updating(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.LicenseAdditionalAttribute e)
            {
                d.LicenseAdditionalAttributes_Updating(e);
            }
            private static void __LicenseAdditionalAttributes_Updated(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.LicenseAdditionalAttribute e)
            {
                d.LicenseAdditionalAttributes_Updated(e);
            }
            private static void __LicenseAdditionalAttributes_Deleting(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.LicenseAdditionalAttribute e)
            {
                d.LicenseAdditionalAttributes_Deleting(e);
            }
            private static void __LicenseAdditionalAttributes_Deleted(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.LicenseAdditionalAttribute e)
            {
                d.LicenseAdditionalAttributes_Deleted(e);
            }
            private static void __LicenseAdditionalAttributes_Validate(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.LicenseAdditionalAttribute e, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder r)
            {
                d.LicenseAdditionalAttributes_Validate(e, r);
            }
            private static global::System.Linq.Expressions.Expression<global::System.Func<global::LightSwitchApplication.LicenseAdditionalAttribute, bool>> __LicenseAdditionalAttributes_Filter(global::LightSwitchApplication.ApplicationDataService d)
            {
                global::System.Linq.Expressions.Expression<global::System.Func<global::LightSwitchApplication.LicenseAdditionalAttribute, bool>> filter = null;
                d.LicenseAdditionalAttributes_Filter(ref filter);
                return filter;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.OperationEntry<global::LightSwitchApplication.ApplicationDataService>
                __SaveChangesEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.OperationEntry<global::LightSwitchApplication.ApplicationDataService>(
                    "SaveChanges",
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__SaveChanges_CanExecute,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__SaveChanges_Executing,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__SaveChanges_Executed,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__SaveChanges_Failed);
            private static bool __SaveChanges_CanExecute(global::LightSwitchApplication.ApplicationDataService d, bool r)
            {
                d.SaveChanges_CanExecute(ref r);
                return r;
            }
            private static void __SaveChanges_Executing(global::LightSwitchApplication.ApplicationDataService d, object[] args)
            {
                d.SaveChanges_Executing();
            }
            private static void __SaveChanges_Executed(global::LightSwitchApplication.ApplicationDataService d, object[] args)
            {
                d.SaveChanges_Executed();
            }
            private static void __SaveChanges_Failed(global::LightSwitchApplication.ApplicationDataService d, object[] args, global::System.Exception ex)
            {
                d.SaveChanges_ExecuteFailed(ex);
            }
    
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.QueryEntry<global::LightSwitchApplication.ApplicationDataService>
                ___QueryEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.QueryEntry<global::LightSwitchApplication.ApplicationDataService>(
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__Query_Executing,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__Query_Executed,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__Query_Failed);
            private static void __Query_Executing(global::LightSwitchApplication.ApplicationDataService d, global::Microsoft.LightSwitch.QueryExecutingDescriptor queryDescriptor)
            {
                d.Query_Executing(queryDescriptor);
            }
            private static void __Query_Executed(global::LightSwitchApplication.ApplicationDataService d, global::Microsoft.LightSwitch.QueryExecutedDescriptor queryDescriptor)
            {
                d.Query_Executed(queryDescriptor);
            }
            private static void __Query_Failed(global::LightSwitchApplication.ApplicationDataService d, global::Microsoft.LightSwitch.QueryExecuteFailedDescriptor queryDescriptor)
            {
                d.Query_ExecuteFailed(queryDescriptor);
            }
        }
    
        #endregion
    }
    
    #endregion
}
