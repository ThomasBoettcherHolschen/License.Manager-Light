

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LightSwitchApplication
{
    #region Entities
    
    /// <summary>
    /// No Modeled Description Available
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.0.0.0")]
    public sealed partial class License : global::Microsoft.LightSwitch.Framework.Base.EntityObject<global::LightSwitchApplication.License, global::LightSwitchApplication.License.DetailsClass>
    {
        #region Constructors
    
        /// <summary>
        /// Initializes a new instance of the License entity.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public License()
            : this(null)
        {
        }
    
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public License(global::Microsoft.LightSwitch.Framework.EntitySet<global::LightSwitchApplication.License> entitySet)
            : base(entitySet)
        {
            global::LightSwitchApplication.License.DetailsClass.Initialize(this);
        }
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void License_Created();
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void License_AllowSaveWithErrors(ref bool result);
    
        #endregion
    
        #region Private Properties
        
        /// <summary>
        /// Gets the Application object for this application.  The Application object provides access to active screens, methods to open screens and access to the current user.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::Microsoft.LightSwitch.IApplication<global::LightSwitchApplication.DataWorkspace> Application
        {
            get
            {
                return global::LightSwitchApplication.Application.Current;
            }
        }
        
        /// <summary>
        /// Gets the containing data workspace.  The data workspace provides access to all data sources in the application.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::LightSwitchApplication.DataWorkspace DataWorkspace
        {
            get
            {
                return (global::LightSwitchApplication.DataWorkspace)this.Details.EntitySet.Details.DataService.Details.DataWorkspace;
            }
        }
        
        #endregion
    
        #region Public Properties
    
        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public int Id
        {
            get
            {
                return global::LightSwitchApplication.License.DetailsClass.GetValue(this, global::LightSwitchApplication.License.DetailsClass.PropertySetProperties.Id);
            }
            set
            {
                global::LightSwitchApplication.License.DetailsClass.SetValue(this, global::LightSwitchApplication.License.DetailsClass.PropertySetProperties.Id, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Id_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Id_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Id_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public byte[] RowVersion
        {
            get
            {
                return global::LightSwitchApplication.License.DetailsClass.GetValue(this, global::LightSwitchApplication.License.DetailsClass.PropertySetProperties.RowVersion);
            }
            set
            {
                global::LightSwitchApplication.License.DetailsClass.SetValue(this, global::LightSwitchApplication.License.DetailsClass.PropertySetProperties.RowVersion, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void RowVersion_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void RowVersion_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void RowVersion_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Guid LicenseId
        {
            get
            {
                return global::LightSwitchApplication.License.DetailsClass.GetValue(this, global::LightSwitchApplication.License.DetailsClass.PropertySetProperties.LicenseId);
            }
            set
            {
                global::LightSwitchApplication.License.DetailsClass.SetValue(this, global::LightSwitchApplication.License.DetailsClass.PropertySetProperties.LicenseId, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void LicenseId_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void LicenseId_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void LicenseId_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string Type
        {
            get
            {
                return global::LightSwitchApplication.License.DetailsClass.GetValue(this, global::LightSwitchApplication.License.DetailsClass.PropertySetProperties.Type);
            }
            set
            {
                global::LightSwitchApplication.License.DetailsClass.SetValue(this, global::LightSwitchApplication.License.DetailsClass.PropertySetProperties.Type, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Type_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Type_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Type_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Nullable<int> Quantity
        {
            get
            {
                return global::LightSwitchApplication.License.DetailsClass.GetValue(this, global::LightSwitchApplication.License.DetailsClass.PropertySetProperties.Quantity);
            }
            set
            {
                global::LightSwitchApplication.License.DetailsClass.SetValue(this, global::LightSwitchApplication.License.DetailsClass.PropertySetProperties.Quantity, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Quantity_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Quantity_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Quantity_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Nullable<global::System.DateTime> Expiration
        {
            get
            {
                return global::LightSwitchApplication.License.DetailsClass.GetValue(this, global::LightSwitchApplication.License.DetailsClass.PropertySetProperties.Expiration);
            }
            set
            {
                global::LightSwitchApplication.License.DetailsClass.SetValue(this, global::LightSwitchApplication.License.DetailsClass.PropertySetProperties.Expiration, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Expiration_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Expiration_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Expiration_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::LightSwitchApplication.Product Product
        {
            get
            {
                return global::LightSwitchApplication.License.DetailsClass.GetValue(this, global::LightSwitchApplication.License.DetailsClass.PropertySetProperties.Product);
            }
            set
            {
                global::LightSwitchApplication.License.DetailsClass.SetValue(this, global::LightSwitchApplication.License.DetailsClass.PropertySetProperties.Product, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Product_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Product_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Product_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::LightSwitchApplication.Customer Customer
        {
            get
            {
                return global::LightSwitchApplication.License.DetailsClass.GetValue(this, global::LightSwitchApplication.License.DetailsClass.PropertySetProperties.Customer);
            }
            set
            {
                global::LightSwitchApplication.License.DetailsClass.SetValue(this, global::LightSwitchApplication.License.DetailsClass.PropertySetProperties.Customer, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Customer_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Customer_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Customer_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Microsoft.LightSwitch.Framework.EntityCollection<global::LightSwitchApplication.LicenseProductFeature> LicenseProductFeatures
        {
            get
            {
                return global::LightSwitchApplication.License.DetailsClass.GetValue(this, global::LightSwitchApplication.License.DetailsClass.PropertySetProperties.LicenseProductFeatures);
            }
        }
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Microsoft.LightSwitch.IDataServiceQueryable<global::LightSwitchApplication.LicenseProductFeature> LicenseProductFeaturesQuery
        {
            get
            {
                return global::LightSwitchApplication.License.DetailsClass.GetQuery(this, global::LightSwitchApplication.License.DetailsClass.PropertySetProperties.LicenseProductFeatures);
            }
        }

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Microsoft.LightSwitch.Framework.EntityCollection<global::LightSwitchApplication.LicenseAdditionalAttribute> LicenseAdditionalAttributes
        {
            get
            {
                return global::LightSwitchApplication.License.DetailsClass.GetValue(this, global::LightSwitchApplication.License.DetailsClass.PropertySetProperties.LicenseAdditionalAttributes);
            }
        }
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Microsoft.LightSwitch.IDataServiceQueryable<global::LightSwitchApplication.LicenseAdditionalAttribute> LicenseAdditionalAttributesQuery
        {
            get
            {
                return global::LightSwitchApplication.License.DetailsClass.GetQuery(this, global::LightSwitchApplication.License.DetailsClass.PropertySetProperties.LicenseAdditionalAttributes);
            }
        }

        #endregion
    
        #region Details Class
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed class DetailsClass : global::Microsoft.LightSwitch.Details.Framework.Base.EntityDetails<
                global::LightSwitchApplication.License,
                global::LightSwitchApplication.License.DetailsClass,
                global::LightSwitchApplication.License.DetailsClass.IImplementation,
                global::LightSwitchApplication.License.DetailsClass.PropertySet,
                global::Microsoft.LightSwitch.Details.Framework.EntityCommandSet<global::LightSwitchApplication.License, global::LightSwitchApplication.License.DetailsClass>,
                global::Microsoft.LightSwitch.Details.Framework.EntityMethodSet<global::LightSwitchApplication.License, global::LightSwitchApplication.License.DetailsClass>>
        {
    
            static DetailsClass()
            {
                var initializeEntry = global::LightSwitchApplication.License.DetailsClass.PropertySetProperties.Id;
            }
    
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Base.EntityDetails<global::LightSwitchApplication.License, global::LightSwitchApplication.License.DetailsClass>.Entry
                __LicenseEntry = new global::Microsoft.LightSwitch.Details.Framework.Base.EntityDetails<global::LightSwitchApplication.License, global::LightSwitchApplication.License.DetailsClass>.Entry(
                    global::LightSwitchApplication.License.DetailsClass.__License_CreateNew,
                    global::LightSwitchApplication.License.DetailsClass.__License_Created,
                    global::LightSwitchApplication.License.DetailsClass.__License_AllowSaveWithErrors);
            private static global::LightSwitchApplication.License __License_CreateNew(global::Microsoft.LightSwitch.Framework.EntitySet<global::LightSwitchApplication.License> es)
            {
                return new global::LightSwitchApplication.License(es);
            }
            private static void __License_Created(global::LightSwitchApplication.License e)
            {
                e.License_Created();
            }
            private static bool __License_AllowSaveWithErrors(global::LightSwitchApplication.License e)
            {
                bool result = false;
                e.License_AllowSaveWithErrors(ref result);
                return result;
            }
    
            public DetailsClass() : base()
            {
            }
    
            public new global::Microsoft.LightSwitch.Details.Framework.EntityCommandSet<global::LightSwitchApplication.License, global::LightSwitchApplication.License.DetailsClass> Commands
            {
                get
                {
                    return base.Commands;
                }
            }
    
            public new global::Microsoft.LightSwitch.Details.Framework.EntityMethodSet<global::LightSwitchApplication.License, global::LightSwitchApplication.License.DetailsClass> Methods
            {
                get
                {
                    return base.Methods;
                }
            }
    
            public new global::LightSwitchApplication.License.DetailsClass.PropertySet Properties
            {
                get
                {
                    return base.Properties;
                }
            }
    
            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.0.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sealed class PropertySet : global::Microsoft.LightSwitch.Details.Framework.Base.EntityPropertySet<global::LightSwitchApplication.License, global::LightSwitchApplication.License.DetailsClass>
            {
    
                public PropertySet() : base()
                {
                }
    
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.License, global::LightSwitchApplication.License.DetailsClass, int> Id
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.License.DetailsClass.PropertySetProperties.Id) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.License, global::LightSwitchApplication.License.DetailsClass, int>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.License, global::LightSwitchApplication.License.DetailsClass, byte[]> RowVersion
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.License.DetailsClass.PropertySetProperties.RowVersion) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.License, global::LightSwitchApplication.License.DetailsClass, byte[]>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.License, global::LightSwitchApplication.License.DetailsClass, global::System.Guid> LicenseId
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.License.DetailsClass.PropertySetProperties.LicenseId) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.License, global::LightSwitchApplication.License.DetailsClass, global::System.Guid>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.License, global::LightSwitchApplication.License.DetailsClass, string> Type
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.License.DetailsClass.PropertySetProperties.Type) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.License, global::LightSwitchApplication.License.DetailsClass, string>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.License, global::LightSwitchApplication.License.DetailsClass, global::System.Nullable<int>> Quantity
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.License.DetailsClass.PropertySetProperties.Quantity) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.License, global::LightSwitchApplication.License.DetailsClass, global::System.Nullable<int>>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.License, global::LightSwitchApplication.License.DetailsClass, global::System.Nullable<global::System.DateTime>> Expiration
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.License.DetailsClass.PropertySetProperties.Expiration) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.License, global::LightSwitchApplication.License.DetailsClass, global::System.Nullable<global::System.DateTime>>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityReferenceProperty<global::LightSwitchApplication.License, global::LightSwitchApplication.License.DetailsClass, global::LightSwitchApplication.Product> Product
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.License.DetailsClass.PropertySetProperties.Product) as global::Microsoft.LightSwitch.Details.Framework.EntityReferenceProperty<global::LightSwitchApplication.License, global::LightSwitchApplication.License.DetailsClass, global::LightSwitchApplication.Product>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityReferenceProperty<global::LightSwitchApplication.License, global::LightSwitchApplication.License.DetailsClass, global::LightSwitchApplication.Customer> Customer
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.License.DetailsClass.PropertySetProperties.Customer) as global::Microsoft.LightSwitch.Details.Framework.EntityReferenceProperty<global::LightSwitchApplication.License, global::LightSwitchApplication.License.DetailsClass, global::LightSwitchApplication.Customer>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityCollectionProperty<global::LightSwitchApplication.License, global::LightSwitchApplication.License.DetailsClass, global::LightSwitchApplication.LicenseProductFeature> LicenseProductFeatures
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.License.DetailsClass.PropertySetProperties.LicenseProductFeatures) as global::Microsoft.LightSwitch.Details.Framework.EntityCollectionProperty<global::LightSwitchApplication.License, global::LightSwitchApplication.License.DetailsClass, global::LightSwitchApplication.LicenseProductFeature>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityCollectionProperty<global::LightSwitchApplication.License, global::LightSwitchApplication.License.DetailsClass, global::LightSwitchApplication.LicenseAdditionalAttribute> LicenseAdditionalAttributes
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.License.DetailsClass.PropertySetProperties.LicenseAdditionalAttributes) as global::Microsoft.LightSwitch.Details.Framework.EntityCollectionProperty<global::LightSwitchApplication.License, global::LightSwitchApplication.License.DetailsClass, global::LightSwitchApplication.LicenseAdditionalAttribute>;
                    }
                }
                
            }
    
            #pragma warning disable 109
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
            public interface IImplementation : global::Microsoft.LightSwitch.Internal.IEntityImplementation
            {
                new int Id { get; set; }
                new byte[] RowVersion { get; set; }
                new global::System.Guid LicenseId { get; set; }
                new string Type { get; set; }
                new global::System.Nullable<int> Quantity { get; set; }
                new global::System.Nullable<global::System.DateTime> Expiration { get; set; }
                new global::Microsoft.LightSwitch.Internal.IEntityImplementation Product { get; set; }
                new global::Microsoft.LightSwitch.Internal.IEntityImplementation Customer { get; set; }
                new global::System.Collections.IEnumerable LicenseProductFeatures { get; }
                new global::System.Collections.IEnumerable LicenseAdditionalAttributes { get; }
            }
            #pragma warning restore 109
    
            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.0.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal class PropertySetProperties
            {
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.License, global::LightSwitchApplication.License.DetailsClass, int>.Entry
                    Id = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.License, global::LightSwitchApplication.License.DetailsClass, int>.Entry(
                        "Id",
                        global::LightSwitchApplication.License.DetailsClass.PropertySetProperties._Id_Stub,
                        global::LightSwitchApplication.License.DetailsClass.PropertySetProperties._Id_ComputeIsReadOnly,
                        global::LightSwitchApplication.License.DetailsClass.PropertySetProperties._Id_Validate,
                        global::LightSwitchApplication.License.DetailsClass.PropertySetProperties._Id_GetImplementationValue,
                        global::LightSwitchApplication.License.DetailsClass.PropertySetProperties._Id_SetImplementationValue,
                        global::LightSwitchApplication.License.DetailsClass.PropertySetProperties._Id_OnValueChanged);
                private static void _Id_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.License.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.License, global::LightSwitchApplication.License.DetailsClass, int>.Data> c, global::LightSwitchApplication.License.DetailsClass d, object sf)
                {
                    c(d, ref d._Id, sf);
                }
                private static bool _Id_ComputeIsReadOnly(global::LightSwitchApplication.License e)
                {
                    bool result = false;
                    e.Id_IsReadOnly(ref result);
                    return result;
                }
                private static void _Id_Validate(global::LightSwitchApplication.License e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.Id_Validate(r);
                }
                private static int _Id_GetImplementationValue(global::LightSwitchApplication.License.DetailsClass d)
                {
                    return d.ImplementationEntity.Id;
                }
                private static void _Id_SetImplementationValue(global::LightSwitchApplication.License.DetailsClass d, int v)
                {
                    d.ImplementationEntity.Id = v;
                }
                private static void _Id_OnValueChanged(global::LightSwitchApplication.License e)
                {
                    e.Id_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.License, global::LightSwitchApplication.License.DetailsClass, byte[]>.Entry
                    RowVersion = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.License, global::LightSwitchApplication.License.DetailsClass, byte[]>.Entry(
                        "RowVersion",
                        global::LightSwitchApplication.License.DetailsClass.PropertySetProperties._RowVersion_Stub,
                        global::LightSwitchApplication.License.DetailsClass.PropertySetProperties._RowVersion_ComputeIsReadOnly,
                        global::LightSwitchApplication.License.DetailsClass.PropertySetProperties._RowVersion_Validate,
                        global::LightSwitchApplication.License.DetailsClass.PropertySetProperties._RowVersion_GetImplementationValue,
                        global::LightSwitchApplication.License.DetailsClass.PropertySetProperties._RowVersion_SetImplementationValue,
                        global::LightSwitchApplication.License.DetailsClass.PropertySetProperties._RowVersion_OnValueChanged);
                private static void _RowVersion_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.License.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.License, global::LightSwitchApplication.License.DetailsClass, byte[]>.Data> c, global::LightSwitchApplication.License.DetailsClass d, object sf)
                {
                    c(d, ref d._RowVersion, sf);
                }
                private static bool _RowVersion_ComputeIsReadOnly(global::LightSwitchApplication.License e)
                {
                    bool result = false;
                    e.RowVersion_IsReadOnly(ref result);
                    return result;
                }
                private static void _RowVersion_Validate(global::LightSwitchApplication.License e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.RowVersion_Validate(r);
                }
                private static byte[] _RowVersion_GetImplementationValue(global::LightSwitchApplication.License.DetailsClass d)
                {
                    return d.ImplementationEntity.RowVersion;
                }
                private static void _RowVersion_SetImplementationValue(global::LightSwitchApplication.License.DetailsClass d, byte[] v)
                {
                    d.ImplementationEntity.RowVersion = v;
                }
                private static void _RowVersion_OnValueChanged(global::LightSwitchApplication.License e)
                {
                    e.RowVersion_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.License, global::LightSwitchApplication.License.DetailsClass, global::System.Guid>.Entry
                    LicenseId = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.License, global::LightSwitchApplication.License.DetailsClass, global::System.Guid>.Entry(
                        "LicenseId",
                        global::LightSwitchApplication.License.DetailsClass.PropertySetProperties._LicenseId_Stub,
                        global::LightSwitchApplication.License.DetailsClass.PropertySetProperties._LicenseId_ComputeIsReadOnly,
                        global::LightSwitchApplication.License.DetailsClass.PropertySetProperties._LicenseId_Validate,
                        global::LightSwitchApplication.License.DetailsClass.PropertySetProperties._LicenseId_GetImplementationValue,
                        global::LightSwitchApplication.License.DetailsClass.PropertySetProperties._LicenseId_SetImplementationValue,
                        global::LightSwitchApplication.License.DetailsClass.PropertySetProperties._LicenseId_OnValueChanged);
                private static void _LicenseId_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.License.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.License, global::LightSwitchApplication.License.DetailsClass, global::System.Guid>.Data> c, global::LightSwitchApplication.License.DetailsClass d, object sf)
                {
                    c(d, ref d._LicenseId, sf);
                }
                private static bool _LicenseId_ComputeIsReadOnly(global::LightSwitchApplication.License e)
                {
                    bool result = false;
                    e.LicenseId_IsReadOnly(ref result);
                    return result;
                }
                private static void _LicenseId_Validate(global::LightSwitchApplication.License e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.LicenseId_Validate(r);
                }
                private static global::System.Guid _LicenseId_GetImplementationValue(global::LightSwitchApplication.License.DetailsClass d)
                {
                    return d.ImplementationEntity.LicenseId;
                }
                private static void _LicenseId_SetImplementationValue(global::LightSwitchApplication.License.DetailsClass d, global::System.Guid v)
                {
                    d.ImplementationEntity.LicenseId = v;
                }
                private static void _LicenseId_OnValueChanged(global::LightSwitchApplication.License e)
                {
                    e.LicenseId_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.License, global::LightSwitchApplication.License.DetailsClass, string>.Entry
                    Type = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.License, global::LightSwitchApplication.License.DetailsClass, string>.Entry(
                        "Type",
                        global::LightSwitchApplication.License.DetailsClass.PropertySetProperties._Type_Stub,
                        global::LightSwitchApplication.License.DetailsClass.PropertySetProperties._Type_ComputeIsReadOnly,
                        global::LightSwitchApplication.License.DetailsClass.PropertySetProperties._Type_Validate,
                        global::LightSwitchApplication.License.DetailsClass.PropertySetProperties._Type_GetImplementationValue,
                        global::LightSwitchApplication.License.DetailsClass.PropertySetProperties._Type_SetImplementationValue,
                        global::LightSwitchApplication.License.DetailsClass.PropertySetProperties._Type_OnValueChanged);
                private static void _Type_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.License.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.License, global::LightSwitchApplication.License.DetailsClass, string>.Data> c, global::LightSwitchApplication.License.DetailsClass d, object sf)
                {
                    c(d, ref d._Type, sf);
                }
                private static bool _Type_ComputeIsReadOnly(global::LightSwitchApplication.License e)
                {
                    bool result = false;
                    e.Type_IsReadOnly(ref result);
                    return result;
                }
                private static void _Type_Validate(global::LightSwitchApplication.License e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.Type_Validate(r);
                }
                private static string _Type_GetImplementationValue(global::LightSwitchApplication.License.DetailsClass d)
                {
                    return d.ImplementationEntity.Type;
                }
                private static void _Type_SetImplementationValue(global::LightSwitchApplication.License.DetailsClass d, string v)
                {
                    d.ImplementationEntity.Type = v;
                }
                private static void _Type_OnValueChanged(global::LightSwitchApplication.License e)
                {
                    e.Type_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.License, global::LightSwitchApplication.License.DetailsClass, global::System.Nullable<int>>.Entry
                    Quantity = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.License, global::LightSwitchApplication.License.DetailsClass, global::System.Nullable<int>>.Entry(
                        "Quantity",
                        global::LightSwitchApplication.License.DetailsClass.PropertySetProperties._Quantity_Stub,
                        global::LightSwitchApplication.License.DetailsClass.PropertySetProperties._Quantity_ComputeIsReadOnly,
                        global::LightSwitchApplication.License.DetailsClass.PropertySetProperties._Quantity_Validate,
                        global::LightSwitchApplication.License.DetailsClass.PropertySetProperties._Quantity_GetImplementationValue,
                        global::LightSwitchApplication.License.DetailsClass.PropertySetProperties._Quantity_SetImplementationValue,
                        global::LightSwitchApplication.License.DetailsClass.PropertySetProperties._Quantity_OnValueChanged);
                private static void _Quantity_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.License.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.License, global::LightSwitchApplication.License.DetailsClass, global::System.Nullable<int>>.Data> c, global::LightSwitchApplication.License.DetailsClass d, object sf)
                {
                    c(d, ref d._Quantity, sf);
                }
                private static bool _Quantity_ComputeIsReadOnly(global::LightSwitchApplication.License e)
                {
                    bool result = false;
                    e.Quantity_IsReadOnly(ref result);
                    return result;
                }
                private static void _Quantity_Validate(global::LightSwitchApplication.License e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.Quantity_Validate(r);
                }
                private static global::System.Nullable<int> _Quantity_GetImplementationValue(global::LightSwitchApplication.License.DetailsClass d)
                {
                    return d.ImplementationEntity.Quantity;
                }
                private static void _Quantity_SetImplementationValue(global::LightSwitchApplication.License.DetailsClass d, global::System.Nullable<int> v)
                {
                    d.ImplementationEntity.Quantity = v;
                }
                private static void _Quantity_OnValueChanged(global::LightSwitchApplication.License e)
                {
                    e.Quantity_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.License, global::LightSwitchApplication.License.DetailsClass, global::System.Nullable<global::System.DateTime>>.Entry
                    Expiration = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.License, global::LightSwitchApplication.License.DetailsClass, global::System.Nullable<global::System.DateTime>>.Entry(
                        "Expiration",
                        global::LightSwitchApplication.License.DetailsClass.PropertySetProperties._Expiration_Stub,
                        global::LightSwitchApplication.License.DetailsClass.PropertySetProperties._Expiration_ComputeIsReadOnly,
                        global::LightSwitchApplication.License.DetailsClass.PropertySetProperties._Expiration_Validate,
                        global::LightSwitchApplication.License.DetailsClass.PropertySetProperties._Expiration_GetImplementationValue,
                        global::LightSwitchApplication.License.DetailsClass.PropertySetProperties._Expiration_SetImplementationValue,
                        global::LightSwitchApplication.License.DetailsClass.PropertySetProperties._Expiration_OnValueChanged);
                private static void _Expiration_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.License.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.License, global::LightSwitchApplication.License.DetailsClass, global::System.Nullable<global::System.DateTime>>.Data> c, global::LightSwitchApplication.License.DetailsClass d, object sf)
                {
                    c(d, ref d._Expiration, sf);
                }
                private static bool _Expiration_ComputeIsReadOnly(global::LightSwitchApplication.License e)
                {
                    bool result = false;
                    e.Expiration_IsReadOnly(ref result);
                    return result;
                }
                private static void _Expiration_Validate(global::LightSwitchApplication.License e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.Expiration_Validate(r);
                }
                private static global::System.Nullable<global::System.DateTime> _Expiration_GetImplementationValue(global::LightSwitchApplication.License.DetailsClass d)
                {
                    return d.ImplementationEntity.Expiration;
                }
                private static void _Expiration_SetImplementationValue(global::LightSwitchApplication.License.DetailsClass d, global::System.Nullable<global::System.DateTime> v)
                {
                    d.ImplementationEntity.Expiration = global::LightSwitchApplication.License.DetailsClass.TruncateDate(v);
                }
                private static void _Expiration_OnValueChanged(global::LightSwitchApplication.License e)
                {
                    e.Expiration_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityReferenceProperty<global::LightSwitchApplication.License, global::LightSwitchApplication.License.DetailsClass, global::LightSwitchApplication.Product>.Entry
                    Product = new global::Microsoft.LightSwitch.Details.Framework.EntityReferenceProperty<global::LightSwitchApplication.License, global::LightSwitchApplication.License.DetailsClass, global::LightSwitchApplication.Product>.Entry(
                        "Product",
                        global::LightSwitchApplication.License.DetailsClass.PropertySetProperties._Product_Stub,
                        global::LightSwitchApplication.License.DetailsClass.PropertySetProperties._Product_ComputeIsReadOnly,
                        global::LightSwitchApplication.License.DetailsClass.PropertySetProperties._Product_Validate,
                        global::LightSwitchApplication.License.DetailsClass.PropertySetProperties._Product_GetCoreImplementationValue,
                        global::LightSwitchApplication.License.DetailsClass.PropertySetProperties._Product_GetImplementationValue,
                        global::LightSwitchApplication.License.DetailsClass.PropertySetProperties._Product_SetImplementationValue,
                        global::LightSwitchApplication.License.DetailsClass.PropertySetProperties._Product_Refresh,
                        global::LightSwitchApplication.License.DetailsClass.PropertySetProperties._Product_OnValueChanged);
                private static void _Product_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.License.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityReferenceProperty<global::LightSwitchApplication.License, global::LightSwitchApplication.License.DetailsClass, global::LightSwitchApplication.Product>.Data> c, global::LightSwitchApplication.License.DetailsClass d, object sf)
                {
                    c(d, ref d._Product, sf);
                }
                private static bool _Product_ComputeIsReadOnly(global::LightSwitchApplication.License e)
                {
                    bool result = false;
                    e.Product_IsReadOnly(ref result);
                    return result;
                }
                private static void _Product_Validate(global::LightSwitchApplication.License e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.Product_Validate(r);
                }
                private static global::Microsoft.LightSwitch.Internal.IEntityImplementation _Product_GetCoreImplementationValue(global::LightSwitchApplication.License.DetailsClass d)
                {
                    return d.ImplementationEntity.Product;
                }
                private static global::LightSwitchApplication.Product _Product_GetImplementationValue(global::LightSwitchApplication.License.DetailsClass d)
                {
                    return d.GetImplementationValue<global::LightSwitchApplication.Product, global::LightSwitchApplication.Product.DetailsClass>(global::LightSwitchApplication.License.DetailsClass.PropertySetProperties.Product, ref d._Product);
                }
                private static void _Product_SetImplementationValue(global::LightSwitchApplication.License.DetailsClass d, global::LightSwitchApplication.Product v)
                {
                    d.SetImplementationValue(global::LightSwitchApplication.License.DetailsClass.PropertySetProperties.Product, ref d._Product, (i, ev) => i.Product = ev, v);
                }
                private static void _Product_Refresh(global::LightSwitchApplication.License.DetailsClass d)
                {
                    d.RefreshNavigationProperty(global::LightSwitchApplication.License.DetailsClass.PropertySetProperties.Product, ref d._Product);
                }
                private static void _Product_OnValueChanged(global::LightSwitchApplication.License e)
                {
                    e.Product_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityReferenceProperty<global::LightSwitchApplication.License, global::LightSwitchApplication.License.DetailsClass, global::LightSwitchApplication.Customer>.Entry
                    Customer = new global::Microsoft.LightSwitch.Details.Framework.EntityReferenceProperty<global::LightSwitchApplication.License, global::LightSwitchApplication.License.DetailsClass, global::LightSwitchApplication.Customer>.Entry(
                        "Customer",
                        global::LightSwitchApplication.License.DetailsClass.PropertySetProperties._Customer_Stub,
                        global::LightSwitchApplication.License.DetailsClass.PropertySetProperties._Customer_ComputeIsReadOnly,
                        global::LightSwitchApplication.License.DetailsClass.PropertySetProperties._Customer_Validate,
                        global::LightSwitchApplication.License.DetailsClass.PropertySetProperties._Customer_GetCoreImplementationValue,
                        global::LightSwitchApplication.License.DetailsClass.PropertySetProperties._Customer_GetImplementationValue,
                        global::LightSwitchApplication.License.DetailsClass.PropertySetProperties._Customer_SetImplementationValue,
                        global::LightSwitchApplication.License.DetailsClass.PropertySetProperties._Customer_Refresh,
                        global::LightSwitchApplication.License.DetailsClass.PropertySetProperties._Customer_OnValueChanged);
                private static void _Customer_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.License.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityReferenceProperty<global::LightSwitchApplication.License, global::LightSwitchApplication.License.DetailsClass, global::LightSwitchApplication.Customer>.Data> c, global::LightSwitchApplication.License.DetailsClass d, object sf)
                {
                    c(d, ref d._Customer, sf);
                }
                private static bool _Customer_ComputeIsReadOnly(global::LightSwitchApplication.License e)
                {
                    bool result = false;
                    e.Customer_IsReadOnly(ref result);
                    return result;
                }
                private static void _Customer_Validate(global::LightSwitchApplication.License e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.Customer_Validate(r);
                }
                private static global::Microsoft.LightSwitch.Internal.IEntityImplementation _Customer_GetCoreImplementationValue(global::LightSwitchApplication.License.DetailsClass d)
                {
                    return d.ImplementationEntity.Customer;
                }
                private static global::LightSwitchApplication.Customer _Customer_GetImplementationValue(global::LightSwitchApplication.License.DetailsClass d)
                {
                    return d.GetImplementationValue<global::LightSwitchApplication.Customer, global::LightSwitchApplication.Customer.DetailsClass>(global::LightSwitchApplication.License.DetailsClass.PropertySetProperties.Customer, ref d._Customer);
                }
                private static void _Customer_SetImplementationValue(global::LightSwitchApplication.License.DetailsClass d, global::LightSwitchApplication.Customer v)
                {
                    d.SetImplementationValue(global::LightSwitchApplication.License.DetailsClass.PropertySetProperties.Customer, ref d._Customer, (i, ev) => i.Customer = ev, v);
                }
                private static void _Customer_Refresh(global::LightSwitchApplication.License.DetailsClass d)
                {
                    d.RefreshNavigationProperty(global::LightSwitchApplication.License.DetailsClass.PropertySetProperties.Customer, ref d._Customer);
                }
                private static void _Customer_OnValueChanged(global::LightSwitchApplication.License e)
                {
                    e.Customer_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityCollectionProperty<global::LightSwitchApplication.License, global::LightSwitchApplication.License.DetailsClass, global::LightSwitchApplication.LicenseProductFeature>.Entry
                    LicenseProductFeatures = new global::Microsoft.LightSwitch.Details.Framework.EntityCollectionProperty<global::LightSwitchApplication.License, global::LightSwitchApplication.License.DetailsClass, global::LightSwitchApplication.LicenseProductFeature>.Entry(
                        "LicenseProductFeatures",
                        global::LightSwitchApplication.License.DetailsClass.PropertySetProperties._LicenseProductFeatures_Stub,
                        global::LightSwitchApplication.License.DetailsClass.PropertySetProperties._LicenseProductFeatures_GetReferencedEntities,
                        global::LightSwitchApplication.License.DetailsClass.PropertySetProperties._LicenseProductFeatures_GetEntityCollection);
                private static void _LicenseProductFeatures_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.License.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityCollectionProperty<global::LightSwitchApplication.License, global::LightSwitchApplication.License.DetailsClass, global::LightSwitchApplication.LicenseProductFeature>.Data> c, global::LightSwitchApplication.License.DetailsClass d, object sf)
                {
                    c(d, ref d._LicenseProductFeatures, sf);
                }
                private static global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.LicenseProductFeature> _LicenseProductFeatures_GetReferencedEntities(global::LightSwitchApplication.License.DetailsClass d)
                {
                    return d.GetReferencedEntities<global::LightSwitchApplication.LicenseProductFeature, global::LightSwitchApplication.LicenseProductFeature.DetailsClass>(global::LightSwitchApplication.License.DetailsClass.PropertySetProperties.LicenseProductFeatures, ref d._LicenseProductFeatures);
                }
                private static global::System.Collections.IEnumerable _LicenseProductFeatures_GetEntityCollection(global::LightSwitchApplication.License.DetailsClass d)
                {
                    return d.ImplementationEntity.LicenseProductFeatures;
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityCollectionProperty<global::LightSwitchApplication.License, global::LightSwitchApplication.License.DetailsClass, global::LightSwitchApplication.LicenseAdditionalAttribute>.Entry
                    LicenseAdditionalAttributes = new global::Microsoft.LightSwitch.Details.Framework.EntityCollectionProperty<global::LightSwitchApplication.License, global::LightSwitchApplication.License.DetailsClass, global::LightSwitchApplication.LicenseAdditionalAttribute>.Entry(
                        "LicenseAdditionalAttributes",
                        global::LightSwitchApplication.License.DetailsClass.PropertySetProperties._LicenseAdditionalAttributes_Stub,
                        global::LightSwitchApplication.License.DetailsClass.PropertySetProperties._LicenseAdditionalAttributes_GetReferencedEntities,
                        global::LightSwitchApplication.License.DetailsClass.PropertySetProperties._LicenseAdditionalAttributes_GetEntityCollection);
                private static void _LicenseAdditionalAttributes_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.License.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityCollectionProperty<global::LightSwitchApplication.License, global::LightSwitchApplication.License.DetailsClass, global::LightSwitchApplication.LicenseAdditionalAttribute>.Data> c, global::LightSwitchApplication.License.DetailsClass d, object sf)
                {
                    c(d, ref d._LicenseAdditionalAttributes, sf);
                }
                private static global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.LicenseAdditionalAttribute> _LicenseAdditionalAttributes_GetReferencedEntities(global::LightSwitchApplication.License.DetailsClass d)
                {
                    return d.GetReferencedEntities<global::LightSwitchApplication.LicenseAdditionalAttribute, global::LightSwitchApplication.LicenseAdditionalAttribute.DetailsClass>(global::LightSwitchApplication.License.DetailsClass.PropertySetProperties.LicenseAdditionalAttributes, ref d._LicenseAdditionalAttributes);
                }
                private static global::System.Collections.IEnumerable _LicenseAdditionalAttributes_GetEntityCollection(global::LightSwitchApplication.License.DetailsClass d)
                {
                    return d.ImplementationEntity.LicenseAdditionalAttributes;
                }
    
            }
    
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.License, global::LightSwitchApplication.License.DetailsClass, int>.Data _Id;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.License, global::LightSwitchApplication.License.DetailsClass, byte[]>.Data _RowVersion;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.License, global::LightSwitchApplication.License.DetailsClass, global::System.Guid>.Data _LicenseId;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.License, global::LightSwitchApplication.License.DetailsClass, string>.Data _Type;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.License, global::LightSwitchApplication.License.DetailsClass, global::System.Nullable<int>>.Data _Quantity;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.License, global::LightSwitchApplication.License.DetailsClass, global::System.Nullable<global::System.DateTime>>.Data _Expiration;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityReferenceProperty<global::LightSwitchApplication.License, global::LightSwitchApplication.License.DetailsClass, global::LightSwitchApplication.Product>.Data _Product;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityReferenceProperty<global::LightSwitchApplication.License, global::LightSwitchApplication.License.DetailsClass, global::LightSwitchApplication.Customer>.Data _Customer;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityCollectionProperty<global::LightSwitchApplication.License, global::LightSwitchApplication.License.DetailsClass, global::LightSwitchApplication.LicenseProductFeature>.Data _LicenseProductFeatures;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityCollectionProperty<global::LightSwitchApplication.License, global::LightSwitchApplication.License.DetailsClass, global::LightSwitchApplication.LicenseAdditionalAttribute>.Data _LicenseAdditionalAttributes;
            
        }
    
        #endregion
    }
    
    #endregion
}
